package kr.or.ddit.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.mapper.FilesDetailMapper;
import kr.or.ddit.vo.FilesDetailVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.coobird.thumbnailator.Thumbnailator;

@Component
@RequiredArgsConstructor
@Slf4j
public class FileUtil {

	private final FilesDetailMapper fileDetailMapper;

	private final String uploadFolder;

	@Transactional
	public int uploadFile(MultipartFile[] uploadFiles, String fileCd) {

		int result = 0;

		String fileName = "";
		
		if (uploadFiles[0].getSize() > 0) {
			
			int cnt = this.fileDetailMapper.searchFileCd(fileCd);
			
			if (cnt == 0) {
				this.fileDetailMapper.insertFile(fileCd);
			}
			
			for (MultipartFile multipartFile : uploadFiles) {
				
				File uploadPath = new File(uploadFolder + "/" + getFolderNames());
				
				if (!uploadPath.exists())
					uploadPath.mkdirs();
				
				fileName = UUID.randomUUID().toString() + "_" + multipartFile.getOriginalFilename();
				
				File saveFile = new File(uploadPath, fileName);
				
				try {
					
					multipartFile.transferTo(saveFile);
					
					FilesDetailVO fileDetailVO = new FilesDetailVO();
					fileDetailVO.setFileCd(fileCd);
					fileDetailVO.setFileSn(0);
					fileDetailVO.setFilePath(saveFile.toString());
					fileDetailVO.setFileOrnm(multipartFile.getOriginalFilename());
					// 유빈 파일 업로드
					fileDetailVO.setFileSvnm(getFolderNames() + "/" + fileName);
					fileDetailVO.setFileCon("content");
					fileDetailVO.setFileSize(Integer.parseInt(String.valueOf(multipartFile.getSize())));
					fileDetailVO.setFileExtsn(fileName.substring(fileName.lastIndexOf(".") + 1));
					result += this.fileDetailMapper.insertFilesDetail(fileDetailVO);
					if (fileDetailVO.getFileExtsn().equals("jpg") || fileDetailVO.getFileExtsn().equals("png")) {
						if (checkImageType(saveFile)) {
							
							FileOutputStream thumbnail = new FileOutputStream(new File(uploadPath + "/s_" + fileName));
							
							Thumbnailator.createThumbnail(multipartFile.getInputStream(), thumbnail, 100, 100);
							thumbnail.close();
						}
					}
					
				} catch (IllegalStateException | IOException e) {
					log.error(e.getMessage());
				}
			}
		}

		return result;
	}

	public boolean checkImageType(File saveFile) {

		String contentType = "";

		try {
			contentType = Files.probeContentType(saveFile.toPath());
			return contentType.startsWith("image");
		} catch (IOException e) {
			log.error(e.getMessage());
		}
		return false;
	}

	public String getFolderNames() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		return sdf.format(new Date());
	}

	// 파일 사용
	public int updateFileUsed(String fileCd) {
		int result = this.fileDetailMapper.updateFileUsed(fileCd);
		return result;
	}

	public int deleteFileUpdate(String fileCd, int fileSn) {
		int result = this.fileDetailMapper.deleteFileUpdate(fileCd, fileSn);
		return result;
	}

}

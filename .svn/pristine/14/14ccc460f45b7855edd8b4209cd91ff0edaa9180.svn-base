package kr.or.ddit.controller.common;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.service.common.AnonymousBoardService;
import kr.or.ddit.vo.BoardVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * 일반 게시판 관리
 * @author 405SEM-PC
 *
 */
@Controller
@RequestMapping("/common/board/anonymous")
@RequiredArgsConstructor
@Slf4j
public class AnonymousBoardController {
	
	private final AnonymousBoardService anonyBoardService;
	
	/** 
	 * 일반 게시판 목록 처리 기능
	 * @param model
	 * @return
	 */
	@GetMapping("/list")
	public String list(Model model) {
		
//		try {
			// 해당하는 메소드가 실행이 되거나 초기 request 데이터에서 요청된 정보를 확인할경우에는 Info 로그를 사용 함..
			log.info("목록 정보 : {}", model);
			
			List<BoardVO> boardList = this.anonyBoardService.list();

			// 프로세스가 실행되고 있을데 데이터의 값을 확인 하기위하여 debug 로그를 사용함..
			log.debug("일반 게시판 목렂 정보 : {}", boardList);
			
			
			model.addAttribute("boardList", boardList);
			
			return "board/anony_board/boardList";
//		} catch (Exception e) {
//			// printStackTrace 보안 위반이라 절대로 사용하시면 안됨니다.
//			//e.printStackTrace();
//			log.error("데이터 목록을 조회 하는 중에 에러가 발생 하였습니", e);
//		}
		
	}
	
	@GetMapping("/detail")
	public String detail(Model model, String bdCd) {
		BoardVO boardVO = this.anonyBoardService.detail(bdCd);
		
		log.info("detail boardVO ==> {}", boardVO);
		model.addAttribute("boardVO", boardVO);
		return "board/anony_board/boardDetail";
	}
	
	@GetMapping("/count")
	@ResponseBody
	public int count(String bdCd) {
		
		return this.anonyBoardService.count(bdCd);
	}
	
	@GetMapping("/insert")
	public String insert() {
		return "board/anony_board/boardCreate";
	}
	
	@PostMapping("/insert")
	public String insert(BoardVO boardVO) {
		log.info("boardVO ==> {}", boardVO);
		int cnt = this.anonyBoardService.insert(boardVO);
		
		if (cnt > 0) return "redirect:/common/board/anonymous/detail?bdCd="+boardVO.getBdCd();
		else return "redirect:/common/board/anonymous/list";
		
	}
	
	@GetMapping("/delete")
	public String delete(String bdCd) {
		
		int result = this.anonyBoardService.delete(bdCd);
		
		if (result > 0) return "redirect:/common/board/anonymous/list";
		else return "redirect:/common/board/anonymous/detail?bdCd=" + bdCd;
		
	}
	
	
	@GetMapping("/update")
	public String update(String bdCd, Model model) {
		
		BoardVO boardVO = this.anonyBoardService.detail(bdCd);
		
		model.addAttribute("boardVO", boardVO);
		
		return "board/anony_board/boardUpdate";
		
	}
	
	
	@PostMapping("/update")
	public String update(BoardVO boardVO) {
		
		log.info("update boardVO ==> {}", boardVO);
		
		int result = this.anonyBoardService.update(boardVO);
		
		if (result > 0) return "redirect:/common/board/anonymous/detail?bdCd=" + boardVO.getBdCd();
		else return "redirect:/common/board/anonymous/list";
		
	}
	
}

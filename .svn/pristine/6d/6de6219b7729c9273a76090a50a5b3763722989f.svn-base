package kr.or.ddit.service.student.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import kr.or.ddit.mapper.CalendarMapper;
import kr.or.ddit.mapper.EnrolmentMapper;
import kr.or.ddit.service.student.EnrolmentService;
import kr.or.ddit.util.EtcUtil;
import kr.or.ddit.vo.CalendarVO;
import kr.or.ddit.vo.LectureVO;
import kr.or.ddit.vo.StudentVO;
import kr.or.ddit.vo.UserVO;
import kr.or.ddit.vo.WishLectureVO;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class EnrolmentServiceImpl implements EnrolmentService{
	
	private final EnrolmentMapper enrolmentMapper;
	
	private final CalendarMapper calendarMapper;

	@Override
	public List<LectureVO> list(StudentVO studentVO) {
		List<LectureVO> lectureList = this.enrolmentMapper.list(studentVO);
		
		HashMap<String, Object> map = new HashMap<String, Object>();
		
		for (LectureVO lectureVO : lectureList) {
			
			if (lectureVO.getLectureApplyVO().getLecaSem() == 1) {
				map.put("startDate", lectureVO.getLectureApplyVO().getLecaYear() + "0302");
				map.put("endDate", lectureVO.getLectureApplyVO().getLecaYear() + "0617");
			} else if (lectureVO.getLectureApplyVO().getLecaSem() == 2) {
				map.put("startDate", lectureVO.getLectureApplyVO().getLecaYear() + "0901");
				map.put("endDate", lectureVO.getLectureApplyVO().getLecaYear() + "1215");
			}
			map.put("startTime", lectureVO.getLectureApplyVO().getLecaStdt());
			map.put("endTime", lectureVO.getLectureApplyVO().getLecaEddt());
			map.put("roomCd", lectureVO.getLectureApplyVO().getRoomCd());
			map.put("days", lectureVO.getLectureScheduleVO().getLecDay().split("/"));
			
			List<CalendarVO> calendarList = this.calendarMapper.dateTransfer(map);
			
			calendarList.stream().forEach(calendar -> {
				calendar.setFormDate(EtcUtil.formDate(calendar.getCalDate()));
			});
			
			lectureVO.setCalendarList(calendarList);
		}
		return lectureList;
	}

	@Override
	public String getColNm(String userCd) {
		return this.enrolmentMapper.getColNm(userCd);
	}

	@Override
	public int addWishLecture(WishLectureVO wishLectureVO) {
		return this.enrolmentMapper.addWishLecture(wishLectureVO);
	}

	@Override
	public int removeWishLecture(WishLectureVO wishLectureVO) {
		return this.enrolmentMapper.removeWishLecture(wishLectureVO);
	}

	@Override
	public List<LectureVO> searchLecture(Map<String, Object> paramMap) {
		return this.enrolmentMapper.searchLecture(paramMap);
	}

	
}

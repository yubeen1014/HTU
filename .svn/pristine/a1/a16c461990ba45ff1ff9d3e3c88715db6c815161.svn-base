package kr.or.ddit.controller.professor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.service.professor.LectureNoticeService;
import kr.or.ddit.service.professor.TaskService;
import kr.or.ddit.util.ArticlePage;
import kr.or.ddit.util.ParamArticlePage;
import kr.or.ddit.vo.EnrolmentVO;
import kr.or.ddit.vo.LectureVO;
import kr.or.ddit.vo.TaskVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@PreAuthorize("hasRole('ROLE_PROFESSOR')")
@RequestMapping("/professor")
/**
 * 과제등록을 위한 클래스
 * @author PC-20
 *
 */
public class TaskController {
	@Autowired
	TaskService taskService;
	@ModelAttribute
	/** 개설된 강의에 대한 정보를 알기위한 메서드*/
	public void lectureList(Model model, String lecCd) {
		
		List<LectureVO> lectureVOList = this.taskService.lectureList();
		
		model.addAttribute("lectureVOList", lectureVOList);
		
	}
	
	@GetMapping("/task/list")
	/** 과제 리스트 */
	public String taskList(Model model,  @RequestParam(value = "keyword", required = false) String keyword,
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(name = "lecCd") String lecCd ) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("keyword", keyword);
		map.put("currentPage", currentPage);
		
		int total = this.taskService.getTotal(map);
		
		List<TaskVO> taskVOList = this.taskService.taskList(map);
		
		ParamArticlePage<TaskVO> articlePage = new ParamArticlePage<TaskVO>(total, currentPage, 10, taskVOList);
		articlePage.setUrl("/professor/task/list?lecCd=" + lecCd);
		
		model.addAttribute("data", articlePage);
		
		
		return "professor/lecture/detail/tasklist";
	}
	
	@GetMapping("/task/detail")
	/** 과제상세 */
	public String taskDetail(Model model, String taskCd) {
		
		TaskVO taskVO = this.taskService.taskDetail(taskCd);
		
		model.addAttribute("taskVO", taskVO);
		
		return "professor/lecture/detail/taskdetail";
	}
	
	@GetMapping("/task/create")
	/** 과제등록 페이지 */
	public String taskCreateGet() {
		
		return "professor/lecture/detail/taskcreate";
	}
	
	@PostMapping("/task/create")
	/** 과제등록 처리 */
	public String taskCreatePost(TaskVO taskVO, RedirectAttributes redirect) {
		
		int result = this.taskService.taskCreatePost(taskVO);
		
		List<EnrolmentVO> enrolmentVOList = this.taskService.getStudent(taskVO);
		
		result += this.taskService.taskNtf(taskVO, enrolmentVOList);
		
		redirect.addFlashAttribute("taskCreate", 1);
		
		return "redirect:/professor/task/list?lecCd=" + taskVO.getLecCd();
	}
	@PostMapping("/task/update")
	/** 과제 수정 */
	public String taskUpdate(TaskVO taskVO, RedirectAttributes redirect) {
		
		int result = this.taskService.taskUpdate(taskVO);
		redirect.addFlashAttribute("taskUpdate", 1);
		
		return "redirect:/professor/task/list?lecCd=" + taskVO.getLecCd();
	}
	@PostMapping("/task/delete")
	/** 과제 삭제 */
	public String taskDelete(TaskVO taskVO, RedirectAttributes redirect, 
			@RequestParam(name = "lecCd") String lecCd ) {
		
		int result = this.taskService.taskDelete(taskVO);
		log.info("lecCd@ => {}", lecCd);
		redirect.addFlashAttribute("taskDelete", 1);
		
		return "redirect:/professor/task/list?lecCd=" + lecCd;
	}
}










package kr.or.ddit.util;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;

import org.springframework.stereotype.Component;
import org.springframework.web.context.ServletContextAware;

import kr.or.ddit.mapper.CommonMapper;
import kr.or.ddit.vo.CommonDetailVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Component
@RequiredArgsConstructor
public class CommonCodeUtil implements ServletContextAware {

	private final CommonMapper commonMapper;

	@Override
	public void setServletContext(ServletContext servletContext) {

		List<CommonDetailVO> commonDetailList = this.commonMapper.getCommonDetailList();
		
		List<CommonDetailVO> conCommonList = new ArrayList<CommonDetailVO>();
		List<CommonDetailVO> sclCommonList = new ArrayList<CommonDetailVO>();
		List<CommonDetailVO> porCommonList = new ArrayList<CommonDetailVO>();
		List<CommonDetailVO> scrCommonList = new ArrayList<CommonDetailVO>();
		List<CommonDetailVO> counCommonList = new ArrayList<CommonDetailVO>();
		List<CommonDetailVO> userCommonList = new ArrayList<CommonDetailVO>();
		List<CommonDetailVO> bldCommonList = new ArrayList<CommonDetailVO>();
		List<CommonDetailVO> colCommonList = new ArrayList<CommonDetailVO>();
		List<CommonDetailVO> brdCommonList = new ArrayList<CommonDetailVO>();
		List<CommonDetailVO> ntfCommonList = new ArrayList<CommonDetailVO>();
		
		for (CommonDetailVO commonDetailVO : commonDetailList) {
			switch (commonDetailVO.getComCd()) {
			case "CON":
				conCommonList.add(commonDetailVO);
				continue;
			case "SCL":
				sclCommonList.add(commonDetailVO);
				continue;
			case "POR":
				porCommonList.add(commonDetailVO);
				continue;
			case "SCR":
				scrCommonList.add(commonDetailVO);
				continue;
			case "COUN":
				counCommonList.add(commonDetailVO);
				continue;
			case "USER":
				userCommonList.add(commonDetailVO);
				continue;
			case "BLD":
				bldCommonList.add(commonDetailVO);
				continue;
			case "COL":
				colCommonList.add(commonDetailVO);
				continue;
			case "BRD":
				brdCommonList.add(commonDetailVO);
				continue;
			case "NTF":
				ntfCommonList.add(commonDetailVO);
				continue;
			}
		}
		// 전체 코드 리스트
		servletContext.setAttribute("commonDetailList", commonDetailList);
		// 장학 코드 리스트
		servletContext.setAttribute("sclCommonList", sclCommonList);
		// 승인 코드 리스트
		servletContext.setAttribute("conCommonList", conCommonList);
		// 포틀릿 코드 리스트
		servletContext.setAttribute("porCommonList", porCommonList);
		// 학적 코드 리스트
		servletContext.setAttribute("scrCommonList", scrCommonList);
		// 상담 코드 리스트
		servletContext.setAttribute("counCommonList", counCommonList);
		// 사용자 코드 리스트
		servletContext.setAttribute("userCommonList", userCommonList);
		// 시설 코드 리스트
		servletContext.setAttribute("bldCommonList", bldCommonList);
		// 단과대 코드 리스트
		servletContext.setAttribute("colCommonList", colCommonList);
		// 게시판 코드 리스트
		servletContext.setAttribute("brdCommonList", brdCommonList);
		// 승인 코드 리스트
		servletContext.setAttribute("ntfCommonList", ntfCommonList);
		
	
	}

}

<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="sec"
	uri="http://www.springframework.org/security/tags"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
<%-- <sec:authentication property="principal.userVO" var="userVO" /> --%>
<style>
	.stuadmin_box{width:100%;}
	.stuadmin_box .table_topic{font-size: 20px; padding-bottom:30px;}
	.stuadmin_box .table_topic i{margin-left:10px;}
	.stuadmin_box table{font-size:14px; width:100%; text-align:center;}
	.table_title{font-size:13px; border-top:1px solid #d1d0d0; border-bottom:1px solid #d1d0d0; height:32px; line-height:32px;}
	.stuadmin_box tr{}
	.stuadmin_box tr td:nth-child(1){width:5%;}
	.stuadmin_box tr td:nth-child(2){width:15%;}
	.stuadmin_box tr td:nth-child(3){width:20%;}
	.stuadmin_box tr td:nth-child(4){width:15%;}
	.stuadmin_box tr td:nth-child(5){width:15%;}
	.stuadmin_box tr td:nth-child(6){width:22%;}
	.stuadmin_box tr td:nth-child(7){width:8%;}
	.jstree-search {
			/* js트리는 search를 이용해 찾은 요소에 italic이 적용돼있는데 구려서 적용해제시킴 */
    		font-style: normal !important;
    		/* 일단 예시로 빨간색을 줘봤는데 알아서 바꾸세용 */
    		color: red;
		}
</style>

    <input type="text" name="keyword" id="keyword">
    <div id="tree"></div>
    <div id="updateForm"></div>

    <script type="text/javascript">
        $(function () {
        	
        	// 노드정보를 저장하기 위한 변수
        	var data = [];
        	
        	// 페이지 로딩시 tree구조 화면에 랜더링
        	renderTree();
        	
        	// 트리구조를 비동기통신 방식으로 서버에서 받아온 후 설정해주는 함수
        	function renderTree() {
                $.ajax({
                    url: "/employee/stuadmin/list",
                    contentType: "text/html; charset=UTF-8",
                    dataType: "json",
                    type: "get",
                    // 통신 성공시
                    success: (res) => {
                    	
                    	// 일단 가져온값 찍음
                    	console.log("renderTree()의 ajax의 return값 : ", res);
                    	
                    	// List로 가져와서 OrganizationChartVO의 개수만큼 반복
                        $.each(res, function (idx, chart) {
                        	
                        	// 트리뷰 한 줄에대한 정보를 tempObj에 저장
                            let tempObj = {
                        		// id에 자신의 코드 저장
                                id: chart.organizationCode,
                             	// parent에 부모의 코드 저장
                                parent: chart.organizationParentCode,
                                // text에 이름을 저장
                                text: chart.organizationName,
                                // 노트의 유형을 저장하는 부분
                            	// 아래에서 type을 설정한다음 값을 줄 수 있음
                            	// 아이콘 외에도 노드의 자식수 등 다양한 설정가능
                                type: "file"
                            };
                            
                        	// 만약 부모가 최상위 노드이면(DB에서 organizationCode의 이름참고)
                            if (tempObj.parent == "#") {
                                tempObj.state = {
                                	// 노드를 열어놓을지 닿아놓을지
                                    opened : true,
                                    // 노드를 활성화할지 비활성화할지
                                    disabled : false,
                                    // 노드가 선택된 상태일지 아닐지
                                    selected: true,
                                    // 노드가 체크된 상태일지 아닐지
                                    checked: false,
                                };
                                tempObj.type = "folder";
                            }
                        	
                        	// 노드를 추가할 때, 노드의 이름을 get방식으로 보내게 되는데
                        	// 서버에서 이 이름을 addAttribute로 그대로 다시 돌려준다
                        	// 만약 insertName이 있다는건 노드를 추가한 상태라는 말이고
                        	// 방금 추가된 노드를 오픈상태로 만들기 위해 아래 코드를 작성한 것
//                             const insertName = "${nodeName}";
//                             if (tempObj.text == insertName) {
//                                 data.forEach(item => {
//                                     if (item.id == tempObj.parent) {
//                                         item.state = {opened : true};
//                                     }
//                                 });
//                             }
                            
                           	// 이렇게 설정된 노드1개의 정보를 위에서 선언한 data배열에 추가
                            data.push(tempObj);
                        });
                        // foreach문 끝
                        
                        // jstree에서 사용되는 플러그인 및 유형을 설정하여 트리를 초기화
                        // 즉, 위에서 설정된 각각의 노드 1줄의 정보들의 배열인 data를 이용해 트리구조 생성
                        $("#tree").jstree({
                            core: {
                                data: data,
                                // 드래그 앤 드롭을 지원하기 위한 콜백함수
                                check_callback: true
                            },
                            // 트리에 적용할 플러그인을 설정
                            // dnd : 드래그 앤 드롭
                            // contextmenu : 우클릭시 메뉴바 활성화
                            // search : 검색
                            // checkbox : 체크박스 활성화
                            // types : 특정 노드의 유형을 커스터마이칭?처럼 설정할 수 있게하는듯
                            // wholerow : 트리 노드 전체 행에 대한 이벤트 처리 및 스타일링 제공
							// unique : 각 노드에 고유한 ID를 부여하고 중복된 ID를 방지
							// 등등 다양한 플러그인이 있으며 그 외의 설정과 자세한 설명은 https://www.jstree.com/plugins/ 여기 있음
                            plugins : ["search", "types"],
                            types : {
                                'folder' : {
                                    "icon" : "/resources/images/icon-folder.png",
                                },
                                'file' : {
                                    "icon" : "/resources/images/icon-file.png",
                                },
                                'injury' : {
                                    "icon" : "/resources/images/icon-injury.png",
                                },
                                'medicine' : {
                                    "icon" : "/resources/images/icon-medicine.png",
                                },
                                'treatment' : {
                                    "icon" : "/resources/images/icon-treatment.png",
                                },
                                'test' : {
                                    "icon" : "/resources/images/icon-test.png",
                                },
                                default: {
                                    "icon": "/resources/images/icon-file.png"
                                }
                            }
                        });
                    },
                    error: xhr => {
                    	console.log(xhr)
                    }
                });
            }
        	
        	// 노드 검색을 위한 함수, 노드 생성시 플러그인에서 search플러그인을 포함시켜줘야해용
        	// 검색창의 값이 입력될 때 마다 검색
            $("#keyword").on("input", function(event) {
            	// 입력된 값 가져오기
                let keyword = $(this).val();
				// jstree의 내장함수를 이용해 검색결과에 효과를 주는부분
				// 효과를 바꾸고 싶으면 위에 style부분 참고하세유
                $("#tree").jstree(true).search(keyword);
            });

        	
        	// 검색을 할 때 마다 실행되는 함수인데 추가적인 로직 넣으실분들은 넣어서 사용하세요
        	// 참고로 저는 input값이 바뀔 때 마다 검색기능을 넣은거라 console이 과도하게 찍힐텐데
        	// 추가적인 로직을 넣으실꺼면 저 위에 input대신 keydown 넣으시고
        	// if (event.originalEvent.code == "Enter" || event.originalEvent.code == "NumpadEnter")
        	// 위에 조건문 추가하셔서 엔터키 눌렀을 때만 검색 되도록 설정하세요
            $("#tree").on("search.jstree", function(e, data) {
                console.log("검색해서 가져온거 : ", data.nodes);
            });

        	
        	// jstree에서 노드를 선택할 때 발생되는 함수
            $("#tree").on("select_node.jstree", function(e, data) {
            	
            	// 선택된 노드의 정보 출력
                console.log("선택된 노드의 정보 : ", data);

            	// 해당 노드의 organizationCode를 이용해 detail을 통해 db에서 자세한 정보들을 가져온 다음 json형태로 가져옴니다
            	// 굳이 json으로 가져오는 이유 -> 데이터의 가공, 활용이 더 쉬워서 그런거같음
            	// 저희 프로젝트 같은 경우는 이렇게 누른 js트리의 정보를 화면에 그대로 옮겨야 되는데
            	// 이럴때 이제 이렇게 join 등을 써서 다양한 정보를 가져오면 예쁘게 활용할 수 있겠졍?ㅋㅋㅎ
                $.ajax({
                    url: "/employee/stuadmin/detail?organizationCode=" + data.node.id,
                    dataType: "json",
                    type: "get",
                    success: res => {
                    	
                    	// 데이터를 성공적으로 가져오면 가져온 데이터 출력
                        console.log("ajax를 통해 detail로 가져온 노드 정보 : ", res);
                    	
                    	let cnt=0;
                    	
                    	// 이렇게 가져온 노드의 정보를 동적으로 화면에 출력시키는 부분
                        let str = `
                            <div class="stuadmin_box">
                                <div class="table_topic">학생정보</div>
                                <table>
                                    <tr class="table_title">
                                    	<td>
                                    	순번
                                    	</td>
                                        <td>단과대학</td>
                                        <td>학과</td>
                                        <td>학번</td>
                                        <td>이름</td>
                                        <td>학적상태</td>
                                        <td>사진유무</td>
                                    </tr>
                        `;

                        res.forEach(student => {

                            let btnText = "";
                            if (student.commonDetailVO.comdNm == '재학') btnText = `<td class="btn-two mini green">\${student.commonDetailVO.comdNm}</td>`;
                            if (student.commonDetailVO.comdNm == '휴학') btnText = `<td class="btn-two mini gray">\${student.commonDetailVO.comdNm}</td>`;
                            if (student.commonDetailVO.comdNm == '자퇴') btnText = `<td class="btn-two mini red">\${student.commonDetailVO.comdNm}</td>`;
                            if (student.commonDetailVO.comdNm == '재적') btnText = `<td class="btn-two mini orange">\${student.commonDetailVO.comdNm}</td>`;
                            if (student.commonDetailVO.comdNm == '졸업') btnText = `<td class="btn-two mini blue">\${student.commonDetailVO.comdNm}</td>`;

                            let fileYn = "";
                            if (student.filesDetailVO == null) fileYn = `<td>X</td>`
                            else fileYn = `<td>O</td>`

                            str += `
                                <tr>
	                            	<td>
	                            	\${++cnt}
	                            	</td>
                                    <td>
                                    \${student.departmentVO.colNm}
                                    </td>
                                    <td>\${student.departmentVO.depNm}</td>
                                    <td>\${student.stuCd}</td>
                                    <td><a href="/employee/stuadmin/stuinfodetail?stuCd=\${student.stuCd}">\${student.userVO.userNm}</a></td>
                                    \${btnText}
                                    \${fileYn}
                                </tr>
                            
                            `


                        })
                        
                        
                        str += `
                            </table>
                        </div>
                        `
                        
                        $("#updateForm").html(str);
                    }
                });
            });
        	
        });
    </script>
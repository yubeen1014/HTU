package kr.or.ddit.controller.common;

import java.security.Principal;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.mapper.UserMapper;
import kr.or.ddit.service.common.UnivMailService;
import kr.or.ddit.vo.FilesDetailVO;
import kr.or.ddit.vo.UnivMailVO;
import kr.or.ddit.vo.UserVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/mail")
public class UnivMailController {
	
	@Autowired
	UnivMailService univMailService;
	
	@Autowired
	UserMapper userMapper;
	
	@ModelAttribute
	public void userList(Model model) {
		List<UserVO> userVOList = this.userMapper.userList();
		model.addAttribute("userVOList", userVOList);
	}

	//받은 메일함
	@GetMapping("/inbox")
	public String inbox(Model model, Principal principal) {
		
		String userCd = principal.getName();
		
		List<UnivMailVO> data = this.univMailService.inbox(userCd);
		log.info("inbox->data : " + data);
		
		model.addAttribute("data", data);
		
		return "mail/inbox";
	}
	
	//보낸 메일함
	@GetMapping("/sentbox")
	public String sentbox(Model model, Principal principal) {
		
		String userCd = principal.getName();
		
		List<UnivMailVO> data = this.univMailService.sentbox(userCd);
		log.info("sentbox->data : " + data);
		
		model.addAttribute("data", data);
		
		return "mail/sentbox";
	}
	
	//메일 작성
	@GetMapping("/sendMail")
	public String sendMail() {
		return "mail/sendMail";
	}
	
	@PostMapping("/sendMailPost")
	public String sendMailPost(UnivMailVO univMailVO, Principal principal) {
	
		String sender = principal.getName();
		log.info("sender : " + sender);
		
		univMailVO.setUmlSender(sender);
	
		int result = this.univMailService.sendMail(univMailVO);
		log.info("sendMailPost->univMailVO : " + univMailVO);
		
		log.info("result : " + result);
		
		if(result > 0) {
			if(univMailVO.getUmlTemp() == 0) {
				return "redirect:/mail/sentbox";
			//메일 임시 저장 시
			}else {
				return "redirect:/mail/tempMailBox";
			}
		}else {
			return null;
		}
	}
	
	//받은 메일 상세
	@GetMapping("/receiveDetail")
	public String receiveMailDetail(String umlCd, Model model) {
		
		UnivMailVO univMailVO = this.univMailService.receiveMailDetail(umlCd);

		log.info("receiveMailDetail->univMailVO : " + univMailVO);
		
		if(univMailVO.getUmlYn() == 0) {
			//메일 읽음
			int umlYn = this.univMailService.readReceiveMail(umlCd);
			log.info("umlYn : " + umlYn);
		}
		
		model.addAttribute("univMailVO", univMailVO);
		
		return "mail/receiveDetail";
	}
	
	//보낸 메일 상세
	@GetMapping("/sendDetail")
	public String sendMailDetail(String umlCd, Model model) {
		
		UnivMailVO univMailVO = this.univMailService.sendMailDetail(umlCd);
		log.info("sendMailDetail->univMailVO : " + univMailVO);
		
		model.addAttribute("univMailVO", univMailVO);
		
		return "mail/sendDetail";
	}
	
	//받은 메일 삭제
	@ResponseBody
	@PostMapping("/deleteReceiveMail")
	public String deleteReceiveMail(String umlCd) {
		log.info("umlCd : " + umlCd);
		
		int result = this.univMailService.deleteMail(umlCd);
		log.info("deleteReceiveMail->result : " + result);
		
		return "/inbox";
	}
	
	//보낸 메일 삭제
	@ResponseBody
	@PostMapping("/deleteSentMail")
	public String deleteSentMail(String umlCd) {
		log.info("umlCd : " + umlCd);
		
		int result = this.univMailService.deleteMail(umlCd);
		log.info("deleteSentMail->result : " + result);
		
		return "/sentbox";
	}
	
	//임시 보관함
	@GetMapping("/tempMailBox")
	public String tempMailBox(UnivMailVO univMailVO, Principal principal, Model model) {
		String userCd = principal.getName();
		
		List<UnivMailVO> data = this.univMailService.tempMailBox(userCd);
		log.info("tempMailBox->data : " + data);
		
		model.addAttribute("data", data);
		
		return "mail/tempMailBox";
	}
	
	//임시 메일 작성
	@GetMapping("/tempMail")
	public String tempMail(String umlCd, Model model) {
		
		UnivMailVO univMailVO = this.univMailService.sendMailDetail(umlCd);
		log.info("tempMail->univMailVO : " + univMailVO);
		
		model.addAttribute("univMailVO", univMailVO);
		
		return "mail/tempMail";
	}
	
	//임시 메일 업데이트
	@PostMapping("/tempMailUpdate")
	public String tempMailUpdate(UnivMailVO univMailVO,String umlCd, Principal principal) {
	
		String sender = principal.getName();
		univMailVO.setUmlSender(sender);
		univMailVO.setUmlCd(umlCd);
		
		int result = this.univMailService.tempMailUpdate(univMailVO);
		
		return "redirect:/mail/tempMailBox";
	}
	
	//임시 메일 파일 삭제
	@ResponseBody
	@PostMapping("/deleteFileUpdate")
	public int deleteFileUpdate(@RequestBody FilesDetailVO filesDetailVO) {
		log.info("deleteFileUpdate->filesDetailVO : " + filesDetailVO);
		
		int result = this.univMailService.deleteFileUpdate(filesDetailVO);
		
		return result;
	}
	
	//임시 저장 메일 전송
	@PostMapping("/sendTempMail")
	public String sendTempMail(UnivMailVO univMailVO,int umlTemp, Principal principal) {
		String sender = principal.getName();
		univMailVO.setUmlSender(sender);
		log.info("sendTempMail->univMailVO : " + univMailVO);
	
		int result = this.univMailService.sendTempMail(univMailVO);
		
		if(result > 0) {
			return "redirect:/mail/sentbox";
		}else {
			return null;
		}
	}
	
	//선택 메일 읽음
	@PostMapping("/readCheck")
	public String readCheck(@RequestBody List<String> umlCdList) {
		log.info("readCheck->umlCdList : " + umlCdList);
		
		int result = this.univMailService.readCheck(umlCdList);
		
		return "mail/inbox";
	}
	
	//선택 메일 삭제
	@PostMapping("/deleteCheck")
	public String deleteCheck(@RequestBody List<String> umlCdList) {
		log.info("deleteCheck->umlCdList : " + umlCdList);
		
		int result = this.univMailService.deleteMail(umlCdList);
		
		return "mail/inbox";
	}
	
}
